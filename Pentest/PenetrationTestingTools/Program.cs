using PenetrationTestingTools.Scripts;


namespace PenetrationTestingTools;

class Program
{
    static async Task Main(string[] args)
    {
        while (true)
        {
            Console.WriteLine("Engage a script:");
            Console.WriteLine("1. Port Scanner");
            Console.WriteLine("2. KeyLogger");
            Console.WriteLine("3. Packet Sniffer");
            Console.WriteLine("4. Vulnerability Scanner");
            Console.WriteLine("5. Reverse Shell");
            Console.WriteLine("6. Spoofing Attack");
            Console.WriteLine("7. Brute Force Attack");
            Console.WriteLine("8. Denial-of-Service (DoS) Attack");
            Console.WriteLine("9. Social Engineering Toolkit");
            Console.WriteLine("10. Web Scraper");
            Console.WriteLine("0. Exit Application");

            int input = Convert.ToInt32(Console.ReadLine());

            switch (input)
            {
                case 1:
                    // Invoke Port Scanner Script
                    Console.WriteLine("Host:");
                    string host = Console.ReadLine();
                    Console.WriteLine("Starting Port:");
                    int port = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Ending Port:");
                    int port2 = Convert.ToInt32(Console.ReadLine());
                    if (host != null) await PortScanner.ScanAll(host: host, startPort: port, endPort: port2);
                    break;
                case 2:
                    // Invoke KeyLogger Script
                    KeyLogger.KeyLoggerRun();
                    break;
                case 3:
                    // Invoke Packet Sniffer Script
                    Console.WriteLine("Host:");
                    string host2 = Console.ReadLine();
                    PacketSniffer.PacketSnifferRun(host2);
                    break;
                case 4:
                    // Invoke Vulnerability Scanner Script
                    Console.Write("Enter target IP: ");
                    string targetIP = Console.ReadLine();
                    await VulnerabilityScanner.ScanAll(targetIP);
                    break;
                case 5:
                    // Invoke Reverse Shell Script
                    Console.Write("Host: ");
                    string hostName = Console.ReadLine();
                    Console.Write("Port: ");
                    int port3 = Convert.ToInt32(Console.ReadLine());
                    ReverseShell.RunAll(hostName, port3);
                    break;
                case 6:
                    // Invoke Spoofing Attack Script
                    Console.Write("Device Name: ");
                    string deviceName = Console.ReadLine();
                    Console.Write("Enter target IP: ");
                    string targetIP2 = Console.ReadLine();
                    Console.Write("Enter Spoof IP: ");
                    string spoofIP2 = Console.ReadLine();
                    if (deviceName != null && targetIP2!=null && spoofIP2!=null)SpoofingAttack.RunAll(deviceName,targetIP2,spoofIP2);
                    break;
                case 7:
                    // Invoke Brute Force Attack Script
                    Console.Write("Password to Crack: ");
                    string passwordToCrack = Console.ReadLine();
                    Console.Write("Max Password Length: ");
                    int maxLength = Convert.ToInt32(Console.ReadLine());
                    BruteForce.RunAll(passwordToCrack, maxLength);
                    break;
                case 8:
                    // Invoke Denial-of-Service (DoS) Attack Script
                    AdvancedDoSAttack.RunAll();
                    break;
                case 9:
                    StealthyKeystrokeRecorder.RunAll();
                    break;
                case 10:
                    Console.Write("Url: ");
                    string url = Console.ReadLine();
                    Webscraper.RunAll(url);
                    break;
                case 0:
                    Environment.Exit(0);
                    break;
                default:
                    Console.WriteLine("Incorrect entry, kindly engage a legitimate script number.");
                    break;
            }
        }
    }
}